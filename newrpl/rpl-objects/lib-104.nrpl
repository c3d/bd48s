@ Typical RPL symbols to copy/paste:
@ « » →
@ Stack diagram symbols:
@ I = Integer number
@ R = Real number
@ Z = Complex number
@ S = String
@ L = List
@ U = Unit object
@ V = Vector
@ M = Matrix
@ N = Variable name
@ O = Any object
@ P = Program
@ A = Algebraic object (symbolic)


@#name lib104_msgtable
{
##1,ERR_NOROOTFOUND "No root found"
##1,ERR_LISTOFEQEXPECTED "Expected list of equations"
##1,ERR_INVALIDLISTOFVARS "Invalid list of variables"
##1,ERR_INVALIDVARRANGE "Invalid variable range"
##1,ERR_REALVALUEDFUNCTIONSONLY "Real valued func only"
##1,ERR_TRYDIFFERENTRANGE "Try a different range"
##1,ERR_INVALIDSYMBFUNCTION "Use 'f(x)=...' in expressions."
}

@#name lib104_ROOT
« { } →
    FCN XMIN XMAX TOLX TOLY RES
    «
        STKPUSH CLEAR
        XMIN XMAX
        WHILE DEPTH 2 ≥ REPEAT
            'xmx' LSTO 'xmn' LSTO
            IFERR FCN xmn xmx TOLY BISECT THEN 0 ELSE 1 END
            IF THEN
                @ FOUND A ROOT
                RES OVER ADD 'RES' STO                           @ ADD ROOT TO THE RESULT
                TOLX 0.5 * - xmn SWAP DUP TOLX + xmx             @ PUT INTERVALS LEFT AND RIGHT OF NEW ROOT
            ELSE
                4 DROPN
                @ NO ROOT FOUND, SPLIT INTERVAL AT THE CENTER
                IF xmx xmn - TOLX > THEN                         @ CHECK IF INTERVAL SMALLER THAN TOLERANCE
                    xmn DUP xmx + 0.5 * DUP xmx                  @ SPLIT INTERVAL IN HALF, EXPLORE BOTH HALVES
                END
            END
        END                                                      @ END LOOP WHEN ALL INTERVALS WERE EXPLORED

      STKPOP
      RES
  »
»



@#name lib104_menu
{
NUMINT ROOT MSOLVE { "" } { "" }
{ { "Finan" 1 } { ::   #06801000h TMENULST ; ::   #06801000h TMENUOTHR ; } }
}

@#name lib104_TVMmenu
{
@ TVM FORMULA: 'FV+PV*(1+(I%YR/PYR)/100)^N+PMT*((1+(I%YR/PYR)/100)^N-1)/((I%YR/PYR)/100)*(1+(I%YR/PYR)/100*FS?(-14))'

@ PV
{
"PV"
{  PV @ NO SHIFT ACTION
  'PV' @ L-SHIFT ACTION
  'PV' @ R-SHIFT ACTION
  'PV' @ LS-HOLD ACTION
  « IFERR '(-FV-PMT*((1+(I%YR/PYR)/100)^N-1)/((I%YR/PYR)/100)*(1+(I%YR/PYR)/100*FS?(-14)))/(1+(I%YR/PYR)/100)^N' →NUM THEN 1 ELSE 0 END
  IF THEN DROP "TVM" ERRN BLAMEERR END DUP 'PV' STO
  » @ RS-HOLD ACTION
}
"PV: Present value

RS-Hold-press to calculate."
}

@ FV
{
"FV"
{  FV @ NO SHIFT ACTION
  'FV' @ L-SHIFT ACTION
  'FV' @ R-SHIFT ACTION
  'FV' @ LS-HOLD ACTION
  « IFERR '-PV*(1+(I%YR/PYR)/100)^N-PMT*((1+(I%YR/PYR)/100)^N-1)/((I%YR/PYR)/100)*(1+(I%YR/PYR)/100*FS?(-14))' →NUM THEN 1 ELSE 0 END
  IF THEN DROP "TVM" ERRN BLAMEERR END DUP 'FV' STO
  » @ RS-HOLD ACTION
}
"FV: Future value (at the end of
N periods)
RS-Hold-press to calculate."
}

@ PMT
{
"PMT"
{  PMT @ NO SHIFT ACTION
  'PMT' @ L-SHIFT ACTION
  'PMT' @ R-SHIFT ACTION
  'PMT' @ LS-HOLD ACTION
  « IFERR '(-FV-PV*(1+(I%YR/PYR)/100)^N)/(((1+(I%YR/PYR)/100)^N-1)/((I%YR/PYR)/100)*(1+(I%YR/PYR)/100*FS?(-14)))' →NUM THEN 1 ELSE 0 END
  IF THEN DROP "TVM" ERRN BLAMEERR END DUP 'PMT' STO
  » @ RS-HOLD ACTION
}
"PMT: Payment amount made on
each period.
RS-Hold-press to calculate."
}

@ I%YR
{
"I%YR"
{  I%YR @ NO SHIFT ACTION
  'I%YR' @ L-SHIFT ACTION
  'I%YR' @ R-SHIFT ACTION
  'I%YR' @ LS-HOLD ACTION
  « IFERR { 'FV+PV*(1+(I%YR/PYR)/100)^N+PMT*((1+(I%YR/PYR)/100)^N-1)/((I%YR/PYR)/100)*(1+(I%YR/PYR)/100*FS?(-14))' } { 'I%YR' } { 1 } { 20 } 1E-8 MSOLVE THEN 1 ELSE 0 END
  IF THEN 5 DROPN "TVM" ERRN BLAMEERR END OBJ→ DROP ABS IF 1E-4 > THEN "TVM" ##1,ERR_NOROOTFOUND BLAMEERR END OBJ→ DROP DUP 'I%YR' STO
  » @ RS-HOLD ACTION
}
"I%YR: Yearly interest rate as
a percentage.
RS-Hold-press to calculate."
}

@ N
{
"N"
{  N @ NO SHIFT ACTION
  'N' @ L-SHIFT ACTION
  'N' @ R-SHIFT ACTION
  'N' @ LS-HOLD ACTION
  « IFERR { 'FV+PV*(1+(I%YR/PYR)/100)^N+PMT*((1+(I%YR/PYR)/100)^N-1)/((I%YR/PYR)/100)*(1+(I%YR/PYR)/100*FS?(-14))' } { 'N' } { 1 } { 20 } 1E-8 MSOLVE THEN 1 ELSE 0 END
  IF THEN 5 DROPN "TVM" ERRN BLAMEERR END OBJ→ DROP ABS IF 1E-4 > THEN "TVM" ##1,ERR_NOROOTFOUND BLAMEERR END OBJ→ DROP DUP 'N' STO
  » @ RS-HOLD ACTION
}
"N: Number of compounding
periods (or payments).
RS-Hold-press to calculate."
}

@ PYR
{
"PYR"
{  PYR @ NO SHIFT ACTION
  'PYR' @ L-SHIFT ACTION
  'PYR' @ R-SHIFT ACTION
  'PYR' @ LS-HOLD ACTION
  « IFERR { 'FV+PV*(1+(I%YR/PYR)/100)^N+PMT*((1+(I%YR/PYR)/100)^N-1)/((I%YR/PYR)/100)*(1+(I%YR/PYR)/100*FS?(-14))' } { 'PYR' } { 10 } { 12 } 1E-8 MSOLVE THEN 1 ELSE 0 END
  IF THEN 5 DROPN "TVM" ERRN BLAMEERR END OBJ→ DROP ABS IF 1E-4 > THEN "TVM" ##1,ERR_NOROOTFOUND BLAMEERR END OBJ→ DROP DUP 'PYR' STO
  » @ RS-HOLD ACTION
}
"PYR: Compounding periods per
year (usually 12 or 1).
RS-Hold-press to calculate."
}

@ END OR START OF PERIOD TOGGLE
{
:: ##1,MAKESINT(FL_TVMEND) IF FS? THEN "■Strt" ELSE "End" END ;
::  ##1,MAKESINT(FL_TVMEND) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
"TVM period mode: Payments occur
at start or end of a period.
Normally at end. Press to toggle.
"
}



}


@#name lib104_cmdhelp
{
NUMINT
"Numerical integration

(A or P) R<a> R<b> R<tol> → R"

ROOT
"Real root finder

(A or P) R<a> R<b> R<Xtol> R<tol> → L"

MSOLVE
"Multiple equation solver
L<A> L<N> L<a> L<b> R<tol> →
L<roots> L<residuals>"

BISECT
"Bisection method

(A or P) R<a> R<b> R<tol> → R"

}
