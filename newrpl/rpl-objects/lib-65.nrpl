@ Typical RPL symbols to copy/paste:
@ « » →
@ Stack diagram symbols:
@ I = Integer number
@ R = Real number
@ Z = Complex number
@ S = String
@ L = List
@ U = Unit object
@ V = Vector
@ M = Matrix
@ N = Variable name
@ O = Any object
@ P = Program
@ A = Algebraic object (symbolic)


@#name alarms_ident
'Alarms'

@#name lib65_menu_0_time
{
  DATE →DATE TIME →TIME { { "Alarms" 1 } :: #04102000h TMENULST DOALARM ; }
  DATE+ DDAYS TICKS CLKADJ TSTR
  →HMS HMS→ HMS+ HMS-
}

@#name lib65_menu_1_memory
{
  MEM BYTES NEWOB GARBAGE VERSION
  PEEK POKE
}

@#name lib65_menu_2_alarms
{
  ACK ACKALL STOALARM RCLALARM DELALARM FINDALARM
}


@#name lib65_msgtable
{
##1,ERR_INVALIDDATE "Invalid date"
##1,ERR_INVALIDTIME "Invalid time"
##1,ERR_BADALARMNUM "Nonexistent alarm"
##1,ERR_INVALIDRPT  "Invalid repeat"
##1,ERR_BADARGVALUE "Bad argument value"
##1,ERR_PASTDUEALRM "Warning: past due alarm"
##1,ERR_ALRMSKIPPED "Alarm skipped"
##1,ERR_ALRMCORRUPT "Alarms list corrupted"
}


@#name lib65_cmdhelp
{
TICKS
"Returns the system time in
microseconds
 → I"

CLKADJ
"Adjusts the system time by x
clock ticks
I →"

DATE
"Returns the system date

 → R"

→DATE
"Sets the system date

R →"

DATE+
"Add a number of days in level 1
to a date in level 2
R I → R"

DDAYS
"Returns the number of days
between two dates
R R → I"

TIME
"Returns the system time in the
form HH.MMSS
 → R"

→TIME
"Sets the system time

R →"

TSTR
"Returns a string derived from
the date and time
 → S"

→HMS
"Converts a real representing
hours to HH.MMSS format
R → R"

HMS→
"Converts a real in HH.MMSS
format to its decimal form
R → R"

HMS+
"Add two real numbers in
HH.MMSS format
R R → R"

HMS-
"Subtract two real numbers in
HH.MMSS format
R R → R"

ACK
"Acknowledges the oldest
past-due alarm
 →"

ACKALL
"Acknowledges all past-due alarms

 →"

STOALARM
"Stores an alarm in the system
alarm list and returns its index
<R or L> → I"

RCLALARM
"Recalls the alarm specified
by its index
I → L"

DELALARM
"Deletes the alarm specified
by its index
I →"

FINDALARM
"Returns the alarm index of the
first alarm due
R → I"

MEM
"Returns the number of bytes of
available RAM
 → I"

PEEK
"Reads 4 bytes from the specified
address in memory.
I → I"

POKE
"Writes 4 bytes in level 1
to the memory address in level 2
I I →"

}




@ ****************************************************************************
@ COMMANDS IMPLEMENTED IN RPL
@ ****************************************************************************


@#name cmd_TEVAL
« :: 0 '.TckStart' LSTO TICKS '.TckStart' LSTO HIDELOCALS EVAL TICKS UNHIDELOCALS .TckStart - 1000000 / ; »




