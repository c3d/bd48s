@ Typical RPL symbols to copy/paste:
@ « » →
@ Stack diagram symbols:
@ I = Integer number
@ R = Real number
@ Z = Complex number
@ S = String
@ L = List
@ U = Unit object
@ V = Vector
@ M = Matrix
@ N = Variable name
@ O = Any object
@ P = Program
@ A = Algebraic object (symbolic)


@#name lib56_menu
{
AUTOSIMPLIFY
RULEMATCH
RULEAPPLY1
RULEAPPLY
→Q

}


@#name lib56_msgtable
{
##1,ERR_SYMBOLICEXPECTED "Expected a symbolic"
##1,ERR_NOTAVALIDRULE "Not a valid rule"
##1,ERR_INVALIDUSERDEFINEDFUNCTION "Invalid user-defined function"
}


@#name lib56_cmdhelp
{
AUTOSIMPLIFY
"Apply basic simplifications
to an expression
A → A"

RULEMATCH
"Get information about how
a rule matches an expression
A A<rule> → A { A A<match> ... } I"

RULEAPPLY1
"Apply rules once

A (A<rule> or L<rules>) → A I"

RULEAPPLY
"Apply rules repeateadly until
there's no more changes
A (A<rule> or L<rules>) → A I"

→Q
"Approximate number with fraction
(denominator < 2^63)
R → A<fraction>"

}

@ THESE ARE RULES TO PREPARE THE EXPRESSIONS FORO SIMPLIFICATION

@#name lib56_autosimplify_pre
{
'-.vX:→(-1)*.vX'                                    @ REMOVE NEGATIVE SIGN FROM VARIABLES
'√.XX:→.XX^INV(2)'                                  @ ELIMINATE SQUARE ROOT FOR OTHER RULES TO WORK
}

@ GROUP 1 = USER DEFINED SIMPLIFICATION RULES

@#name lib56_autosimplify_group1
{

'AUTOSIMPLIFY.RULES'

}


@ GROUP 2 = BASIC (HARMLESS) SIMPLIFICATIONS

@#name lib56_autosimplify_group2
{
'0+.XX:→.XX'                                        @ REMOVE TERMS WITH ZERO
'INV(1):→1'                                         @ ELIMINATE OPERATION ON ONE
'INV(-1):→-1'                                       @ ELIMINATE OPERATION ON MINUS ONE
'1*.XX:→.XX'                                        @ REMOVE MULTIPLY BY ONE
'.XX^1:→.XX'                                        @ REMOVE EXPONENT OF 1
'.MN*.mX+.MM*.mX:→(.MN+.MM)*.mX'                    @ ASSOCIATE TO THE LEFT (NON-COMMUTATIVE)
'.MN*.mX+.mX:→(.MN+1)*.mX'                          @ ASSOCIATE TO THE LEFT (NON-COMMUTATIVE)
'.mX*.MN+.mX*.MM:→.mX*(.MN+.MM)'                    @ ASSOCIATE TO THE RIGHT (NON-COMMUTATIVE)
'.mX*.MN+.mX:→.mX*(.MN+1)'                          @ ASSOCIATE TO THE RIGHT (NON-COMMUTATIVE)
'.xX+.xX:→2*.xX'                                    @ ADD TERMS WITH NO NUMERIC FACTOR
'.NN*.xX^.Nexp+.NM*.xX^.Nexp:→(.NN+.NM)*.xX^.Nexp'  @ ADD TERMS IN THE SAME VARIABLE AS LONG AS THE REST IS NUMERIC
'.xX^.Nexp+.NM*.xX^.Nexp:→(1+.NM)*.xX^.Nexp'        @ ADD TERMS IN THE SAME VARIABLE AS LONG AS THE REST IS NUMERIC
}

@ GROUP 3 = CANCEL TERMS IN DIVISION (MAY REMOVE POLES)

@#name lib56_autosimplify_group3
{
'.xX^.NN*INV(.xX^.NM):→.xX^(.NN-.NM)'               @ CANCEL OUT TERMS WITH EXPONENTS
'.xX^.NN*INV(.xX):→.xX^(.NN-1)'                     @ CANCEL OUT TERMS WITHOUT EXPONENT IN DENOMINATOR
'.xX*INV(.xX^.NM):→.xX^(1-.NM)'                     @ CANCEL OUT TERMS WITHOUT EXPONENT IN NUMERATOR
'.xX^.NN*.xX^.NM:→.xX^(.NN+.NM)'                    @ ADD EXPONENTS IN MULTIPLYING TERMS
'.mX*.mX^.NM:→.mX^(1+.NM)'                          @ ADD EXPONENTS WITH IMPLICIT EXPONENT 1
}


@ GROUP 4 = CANCEL TERMS WITH VARIABLES (k*X-k*X) (INVALID WHEN k*X REACHES INFINITY, OK WHEN THEY ARE FINITE NUMBERS)

@#name lib56_autosimplify_group4
{
'0*.XX:→0'
}

@ GROUP 5 =

@#name lib56_autosimplify_group5
{


}

@ GROUP 6 =

@#name lib56_autosimplify_group6
{


}

@ GROUP 7 =

@#name lib56_autosimplify_group7
{


}

@ GROUP 8 =

@#name lib56_autosimplify_group8
{


}

@ THESE ARE RULES TO BEAUTIFY AN EXPRESSION AFTER ALL OTHER SIMPLIFICATIONS ARE DONE

@#name lib56_autosimplify_post
{
'(-1)*.xX:→-.xX'                                    @ REMOVE MINUS ONE MULTIPLICAND
'.XX^INV(2):→√.XX'                                  @ BACK TO SQUARE ROOTS
}



@ FROM HERE ON, THESE ARE RULES FOR DIFFERENT CAS COMMANDS THAT RELY ON RULES TO DO THEIR WORK


@#name trigsin_rules
{
'COS(.xX)^2:→1-SIN(.xX)^2'
}



