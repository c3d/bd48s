@ Typical RPL symbols to copy/paste:
@ « » → ₀₁₂₃₄₅₆₇₈₉
@ Stack diagram symbols:
@ I = Integer number
@ R = Real number
@ Z = Complex number
@ S = String
@ L = List
@ U = Unit object
@ V = Vector
@ M = Matrix
@ N = Variable name
@ O = Any object
@ P = Program
@ A = Algebraic object (symbolic)


@#name lib56_menu
{
AUTOSIMPLIFY
RULEMATCH
RULEAPPLY1
RULEAPPLY
→Q

}


@#name lib56_msgtable
{
##1,ERR_SYMBOLICEXPECTED "Expected a symbolic"
##1,ERR_NOTAVALIDRULE "Not a valid rule"
##1,ERR_INVALIDUSERDEFINEDFUNCTION "Invalid user-defined function"
}


@#name lib56_cmdhelp
{
AUTOSIMPLIFY
"Apply basic simplifications
to an expression
A → A"

RULEMATCH
"Get information about how
a rule matches an expression
A A<rule> → A { A A<match> ... } I"

RULEAPPLY1
"Apply rules once

A (A<rule> or L<rules>) → A I"

RULEAPPLY
"Apply rules repeateadly until
there's no more changes
A (A<rule> or L<rules>) → A I"

→Q
"Approximate number with fraction
(denominator < 2^63)
R → A<fraction>"

}

@ THESE ARE RULES TO PREPARE THE EXPRESSIONS FORO SIMPLIFICATION

@#name lib56_autosimplify_pre
{
'-.xX:→(-1)*.xX'                                    @ REMOVE NEGATIVE SIGN TO IMPROVE TERM MATCHING
'√.XX:→.XX^INV(2)'                                  @ ELIMINATE SQUARE ROOT FOR OTHER RULES TO WORK
}

@ GROUP 1 = USER DEFINED SIMPLIFICATION RULES

@#name lib56_autosimplify_group1
{

'AUTOSIMPLIFY.RULES'

}


@ GROUP 2 = BASIC (HARMLESS) SIMPLIFICATIONS

@#name lib56_autosimplify_group2
{
'0+.XX:→.XX'                                        @ REMOVE TERMS WITH ZERO
'INV(1):→1'                                         @ ELIMINATE OPERATION ON ONE
'INV(-.xX):→-1*INV(.xX)'                            @ MAKE NEGATION A SCALAR MULTIPLICATION
'1*.XX:→.XX'                                        @ REMOVE MULTIPLY BY ONE
'.XX^1:→.XX'                                        @ REMOVE EXPONENT OF 1
'0*.XX₃:→0'                                         @ MULTIPLY ANYTHING BY ZERO IS ZERO AS LONG AS IT ISN'T INFINITY (FINITE REALS)
'0*.XX₅:→0'                                         @ MULTIPLY ANYTHING BY ZERO IS ZERO AS LONG AS IT ISN'T INFINITY (FINITE COMPLEX)
'.xX₃₁^0:→1'                                        @ ONLY VALID FOR NON-ZERO FINITE REALS
'.xX₅₁^0:→1'                                        @ ONLY VALID FOR NON-ZERO FINITE COMPLEX

'.MN*.mX+.MM*.mX:→(.MN+.MM)*.mX'                    @ ASSOCIATE TO THE LEFT (NON-COMMUTATIVE)
'.MN*.mX+.mX:→(.MN+1)*.mX'                          @ ASSOCIATE TO THE LEFT (NON-COMMUTATIVE)
'.mX*.MN+.mX*.MM:→.mX*(.MN+.MM)'                    @ ASSOCIATE TO THE RIGHT (NON-COMMUTATIVE)
'.mX*.MN+.mX:→.mX*(.MN+1)'                          @ ASSOCIATE TO THE RIGHT (NON-COMMUTATIVE)

'.XN*.xX₂+.XM*.xX₂:→(.XN+.XM)*.xX₂'                 @ ASSOCIATE (COMMUTATIVE, REALS ONLY)
'.XN*.xX₂+.xX₂:→(.XN+1)*.xX'                        @ ASSOCIATE (COMMUTATIVE, REALS ONLY)

'.XN*.xX₄+.XM*.xX₄:→(.XN+.XM)*.xX'                  @ ASSOCIATE (COMMUTATIVE, COMPLEX ONLY)
'.XN*.xX₄+.xX₄:→(.XN+1)*.xX'                        @ ASSOCIATE (COMMUTATIVE, COMPLEX ONLY)

'.xX+.xX:→2*.xX'                                    @ ADD TERMS WITH NO NUMERIC FACTOR

'.mX*.mX:→.mX^2'                                    @ MULTIPLICATION TO POWER CONVERSION (NON-COMMUTATIVE)
'.mX*.mX^.NN₃₂₁:→.mX^(1+.NN)'                       @ MULTIPLICATION TO POWER, AS LONG AS EXPONENTS ARE POSITIVE INTEGER REALS  (NON-COMMUTATIVE)
'.mX^.NN₃₂₁*.mX:→.mX^(.NN+1)'                       @ MULTIPLICATION TO POWER, AS LONG AS EXPONENTS ARE POSITIVE INTEGER REALS  (NON-COMMUTATIVE)
'.mX^.NM₃₂₁*.mX^.NN₃₂₁:→.mX^(.NM+.NN)'              @ MULTIPLICATION TO POWER, AS LONG AS EXPONENTS ARE POSITIVE INTEGER REALS  (NON-COMMUTATIVE)

'INV(.mX)*INV(.mX):→INV(.mX^2)'                     @ MULTIPLICATION TO POWER CONVERSION (NON-COMMUTATIVE)
'INV(.mX)*INV(.mX^.NN₃₂₁):→INV(.mX^(1+.NN))'        @ MULTIPLICATION TO POWER, AS LONG AS EXPONENTS ARE POSITIVE INTEGER REALS  (NON-COMMUTATIVE)
'INV(.mX^.NN₃₂₁)*INV(.mX):→INV(.mX^(.NN+1))'        @ MULTIPLICATION TO POWER, AS LONG AS EXPONENTS ARE POSITIVE INTEGER REALS  (NON-COMMUTATIVE)
'INV(.mX^.NM₃₂₁)*INV(.mX^.NN₃₂₁):→INV(.mX^(.NM+.NN))' @ MULTIPLICATION TO POWER, AS LONG AS EXPONENTS ARE POSITIVE INTEGER REALS  (NON-COMMUTATIVE)
}

@ GROUP 3 = CANCEL TERMS IN DIVISION (MAY REMOVE POLES)

@#name lib56_autosimplify_group3
{
'.mX^.xN*INV(.mX^.xM):→.mX^(.xN-.xM)'               @ CANCEL OUT TERMS WITH EXPONENTS (NON-COMMUTATIVE)
'.xX₂^.xN*INV(.xX₂^.xM):→.xX^(.xN-.xM)'             @ CANCEL OUT TERMS WITH EXPONENTS (COMMUTATIVE, ONLY ACCEPT REAL VARIABLES)
'.xX₄^.xN*INV(.xX₄^.xM):→.xX^(.xN-.xM)'             @ CANCEL OUT TERMS WITH EXPONENTS (COMMUTATIVE, ONLY ACCEPT COMPLEX VARIABLES)

'.mX^.xN*INV(.mX):→.mX^(.xN-1)'                     @ CANCEL OUT TERMS WITHOUT EXPONENT IN DENOMINATOR (NON-COMMUTATIVE)
'.xX₂^.xN*INV(.xX₂):→.xX^(.xN-1)'                   @ CANCEL OUT TERMS WITHOUT EXPONENT IN DENOMINATOR (COMMUTATIVE, ONLY REALS)
'.xX₄^.xN*INV(.xX₄):→.xX^(.xN-1)'                   @ CANCEL OUT TERMS WITHOUT EXPONENT IN DENOMINATOR (COMMUTATIVE, ONLY COMPLEX)
'.mX*INV(.mX^.xM):→.mX^(1-.xM)'                     @ CANCEL OUT TERMS WITHOUT EXPONENT IN NUMERATOR (NON-COMMUTATIVE)
'.xX₂*INV(.xX₂^.xM):→.xX^(1-.xM)'                   @ CANCEL OUT TERMS WITHOUT EXPONENT IN NUMERATOR (COMMUTATIVE, REALS)
'.xX₄*INV(.xX₄^.xM):→.xX^(1-.xM)'                   @ CANCEL OUT TERMS WITHOUT EXPONENT IN NUMERATOR (COMMUTATIVE, REALS)

'.mX*.mX^.xN₂₀₁:→.mX^(1+.xN)'                       @ MULTIPLICATION TO POWER, INTEGER EXPONENTS  (NON-COMMUTATIVE)
'.mX^.xN₂₀₁*.mX:→.mX^(.xN+1)'                       @ MULTIPLICATION TO POWER, INTEGER EXPONENTS  (NON-COMMUTATIVE)
'.mX^.xM₂₀₁*.mX^.xN₂₀₁:→.mX^(.xM+.xN)'              @ MULTIPLICATION TO POWER, INTEGER EXPONENTS  (NON-COMMUTATIVE)
}


@ GROUP 4 = SIMPLIFICATION ASSUMING 0^0=1

@#name lib56_autosimplify_group4
{
'.xX₃^0:→1'                                        @ ONLY VALID FOR FINITE REALS
'.xX₅^0:→1'                                        @ ONLY VALID FOR FINITE COMPLEX
}

@ GROUP 5 = SIMPLIFICATIONS WITH MULTIPLE ROOTS

@#name lib56_autosimplify_group5
{
'(.xX^(.XN/.xD))^.xD:→.xX^.XN'                     @ POWER OF POWER WITH FRACTIONAL EXPONENTS ONLY SIMPLIFY IF IT CANCELS OUT EXACTLY

}

@ GROUP 6 =

@#name lib56_autosimplify_group6
{


}

@ GROUP 7 =

@#name lib56_autosimplify_group7
{


}

@ GROUP 8 =

@#name lib56_autosimplify_group8
{


}

@ THESE ARE RULES TO BEAUTIFY AN EXPRESSION AFTER ALL OTHER SIMPLIFICATIONS ARE DONE

@#name lib56_autosimplify_post
{
'(-1)*.xX:→-.xX'                                    @ REMOVE MINUS ONE MULTIPLICAND
'.xX^(1/2):→√.xX'                                  @ BACK TO SQUARE ROOTS
'.xX^(.NN/2):→√(.xX^.NN)'                           @ BACK TO SQUARE ROOTS
}



@ FROM HERE ON, THESE ARE RULES FOR DIFFERENT CAS COMMANDS THAT RELY ON RULES TO DO THEIR WORK


@#name trigsin_rules
{
'COS(.xX)^2:→1-SIN(.xX)^2'
}

@#name allroots_rules
{
'√.xX:→XROOT(ABS(.xX),2)*{1,-1}'
'.xX^(1/.iN):→XROOT(ABS(.xX),.iN)*е^(ARG(.xX)/.iN*і+RANGE(1,.iN,1))'
}


