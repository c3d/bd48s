@ Typical RPL symbols to copy/paste:
@ « » →
@ Stack diagram symbols:
@ I = Integer number
@ R = Real number
@ Z = Complex number
@ S = String
@ L = List
@ U = Unit object
@ V = Vector
@ M = Matrix
@ N = Variable name
@ O = Any object
@ P = Program
@ A = Algebraic object (symbolic)


@#name lib68_msgtable
{
##1,ERR_SYSTEMFLAGSINVALID "System flags corrupted"
##1,ERR_INVALIDFLAGNUMBER "Invalid flag number"
##1,ERR_INVALIDFLAGNAME "Invalid flag name"
##1,ERR_IDENTORINTEGEREXPECTED "Ident or integer expected"
##1,ERR_INVALIDLOCALESTRING "Invalid locale string"
##1,ERR_INVALIDMENUDEFINITION "Invalid menu definition"
##1,ERR_INVALIDKEYNAME "Invalid key name"
##1,ERR_INVALIDKEYDEFINITION "Invalid key definition"
##1,ERR_INVALIDNUMFORMAT "Invalid number format"
}


@ Library 68 has reserved special menu 0 for Custom Menu 1
@ Library 68 has reserved special menu 1 for Custom Menu 2

@#name sysmenu_2_main
{
  { { "Math" 1 } { ::   #04404000h TMENULST ; ::   #04404000h TMENUOTHR ; } }
  { { "Symb" 1 } { ::   #04405000h TMENULST ; ::   #04405000h TMENUOTHR ; } }
  { { "Units" 1 } { ::   #03600000h TMENULST ; ::   #03600000h TMENUOTHR ; } }
  { { "Prog" 1 } { ::   #04403000h TMENULST ; ::   #04403000h TMENUOTHR ; } }
  { { "System" 1 } { ::   #04406000h TMENULST ; ::   #04406000h TMENUOTHR ; } }
  { { "Vars" 1 } { ::   #00040000h TMENULST ; ::   #00040000h TMENUOTHR ; } }
}

@#name sysmenu_3_prog
{
{ { "Flow" 1 } { ::   #00900000h TMENULST ; ::   #00900000h TMENUOTHR ; } }
{ { "Debug" 1 } { ::   #00800000h TMENULST ; ::   #00800000h TMENUOTHR ; } }
{ { "Error" 1 } { ::   #00801000h TMENULST ; ::   #00801000h TMENUOTHR ; } }
{ { "Stack" 1 } { ::   #04800000h TMENULST ; ::   #04800000h TMENUOTHR ; } }
{ { "Global" 1 } { ::   #01c00000h TMENULST ; ::   #01c00000h TMENUOTHR ; } }
{ { "Local" 1 } { ::   #02000000h TMENULST ; ::   #02000000h TMENUOTHR ; } }
{ { "Text" 1 } { ::   #01800000h TMENULST ; ::   #01800000h TMENUOTHR ; } }
{ { "Real" 1 } { ::   #04000000h TMENULST ; ::   #04000000h TMENUOTHR ; } }
{ { "Base" 1 } { ::   #04600000h TMENULST ; ::   #04600000h TMENUOTHR ; } }
{ { "Cplx" 1 } { ::   #01e00000h TMENULST ; ::   #01e00000h TMENUOTHR ; } }
{ { "Angles" 1 } { ::   #03000000h TMENULST ; ::   #03000000h TMENUOTHR ; } }
{ { "Matrix" 1 } { ::   #03400000h TMENULST ; ::   #03400000h TMENUOTHR ; } }
{ { "List" 1 } { ::   #03e00000h TMENULST ; ::   #03e00000h TMENUOTHR ; } }
{ { "Comp" 1 } { ::   #06000000h TMENULST ; ::   #06000000h TMENUOTHR ; } }
{ { "Flag" 1 } { ::   #04407000h TMENULST ; ::   #04407000h TMENUOTHR ; } }
{ { "Menu" 1 } { ::   #04408000h TMENULST ; ::   #04408000h TMENUOTHR ; } }
{ { "Clip" 1 } { ::   #04c01000h TMENULST ; ::   #04c01000h TMENUOTHR ; } }
{ { "Tag" 1 } { ::   #FF100000h TMENULST ; ::   #FF100000h TMENUOTHR ; } }
{ { "Comments" 1 } { ::   #01400000h TMENULST ; ::   #01400000h TMENUOTHR ; } }
{ { "Binary" 1 } { ::   #04d00000h TMENULST ; ::   #04d00000h TMENUOTHR ; } }
{ { "Lib" 1 } { ::   #06600000h TMENULST ; ::   #06600000h TMENUOTHR ; } }

}

@#name sysmenu_4_math
{
{ { "Arith" 1 } { ::   #04000000h TMENULST ; ::   #04000000h TMENUOTHR ; } }
{ { "Base" 1 } { ::   #04600000h TMENULST ; ::   #04600000h TMENUOTHR ; } }
{ { "Trans" 1 } { ::   #04200000h TMENULST ; ::   #04200000h TMENUOTHR ; } }
{ { "Stats" 1 } { ::   #06200000h TMENULST ; ::   #06200000h TMENUOTHR ; } }
{ { "List" 1 } { ::  #03e01000h TMENULST ; ::   #03e01000h TMENUOTHR ; } }
{ { "Matrix" 1 } { ::  #03401000h TMENULST ; ::   #03401000h TMENUOTHR ; } }
{ { "Solve" 1 } { ::  #06800000h TMENULST ; ::   #06800000h TMENUOTHR ; } }

}

@#name sysmenu_5_symb
{
{ { "Rules" 1 } { ::   #03800000h TMENULST ; ::   #03800000h TMENUOTHR ; } }
}

@#name sysmenu_6_system
{
{ { "Libs" 1 } { ::   #00080000h TMENULST ; ::   #00080000h TMENUOTHR ; } }
{ { "Settings" 1 } { ::   #0440a000h TMENULST ; ::   #0440a000h TMENUOTHR ; } }
{ { "Time" 1 } { ::   #04100000h TMENULST ; ::   #04100000h TMENUOTHR ; } }
{ { "Alarm" 1 } { ::   #04102000h TMENULST ; ::   #04102000h TMENUOTHR ; } }
{ { "Menu" 1 } { ::   #04408000h TMENULST ; ::   #04408000h TMENUOTHR ; } }
{ { "Keys" 1 } { ::   #0440c000h TMENULST ; ::   #0440c000h TMENUOTHR ; } }
{ { "Fonts" 1 } { ::   #04e00000h TMENULST ; ::   #04e00000h TMENUOTHR ; } }
{ { "Clip" 1 } { ::   #04c01000h TMENULST ; ::   #04c01000h TMENUOTHR ; } }
{ { "Mem" 1 } { ::   #04101000h TMENULST ; ::   #04101000h TMENUOTHR ; } }
{ { "Others" 1 } { ::   #04103000h TMENULST ; ::   #04103000h TMENUOTHR ; } }
{ { "SDCard" 1 } { ::   #04a00000h TMENULST ; ::   #04a00000h TMENUOTHR ; } }
{ { "USB" 1 } { ::   #06400000h TMENULST ; ::   #06400000h TMENUOTHR ; } }
{ { "Lib" 1 } { ::   #06600000h TMENULST ; ::   #06600000h TMENUOTHR ; } }

}

@#name sysmenu_7_flags
{
SF CF FS? FC? FC?C FS?C
}

@#name sysmenu_8_menu
{
TMENU RCLMENU MENUSWAP TMENULST RCLMENULST TMENUOTHR RCLMENUOTHR MENUBK MENUBKLST MENUBKOTHR
}

@#name sysmenu_9_clipboard
{
COPYCLIP CUTCLIP PASTECLIP
}

@#name sysmenu_10_settings
{
{ { "Flags" 1 } { ::   #0440b000h TMENULST ; ::   #0440b000h TMENUOTHR ; } }
SETPREC SETNFMT SETLOCALE GETPREC GETNFMT GETLOCALE DEG GRAD RAD DMS
}


@#name sysmenu_11_namedflags
{
@ ANGLE SYSTEM FLAG TOGGLE
{
 :: ##1,MAKESINT(FL_ANGLEMODE1) FS? ##1,MAKESINT(FL_ANGLEMODE2) FS? 2 * +
    CASE
       DUP 0 == THEN DROP "∡°" END
       DUP 1 == THEN DROP "∡r" END
       DUP 2 == THEN DROP "∡g" END
       DUP 3 == THEN DROP "∡d" END
    END
 ;

 :: ##1,MAKESINT(FL_ANGLEMODE1) FS? ##1,MAKESINT(FL_ANGLEMODE2) FS? 2 * +
    1 +
    ##1,MAKESINT(FL_ANGLEMODE1) IF OVER 1 BAND THEN SF ELSE CF END
    ##1,MAKESINT(FL_ANGLEMODE2) IF SWAP 2 BAND THEN SF ELSE CF END

 ;
 "Current angle system
Deg→Rad→Grad→DMS
"
}
@ COMPLEX MODE FLAG TOGGLE
{
:: ##1,MAKESINT(FL_COMPLEXMODE) IF FS? THEN "■CPLX" ELSE "CPLX" END ;
::  ##1,MAKESINT(FL_COMPLEXMODE) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
"Complex mode:
Complex results are allowed.
"
}

@ PREFER j OR i FOR COMPLEX VARIABLE
{
:: ##1,MAKESINT(FL_PREFERJ) IF FS? THEN "■C→ј" ELSE "C→і" END ;
::  ##1,MAKESINT(FL_PREFERJ) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
"Complex unit:
Prefer і or ј for complex expressions
"
}

@ "DATE FORMAT" FLAG TOGGLE
{
  :: ##1,MAKESINT(FL_DATEFORMAT) IF FS? THEN "D.MY" ELSE "M.DY" END ;
  ::  ##1,MAKESINT(FL_DATEFORMAT) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
  "Date format:
DD.MMYYYY or MM.DDYYYY
   (set)        (clear)"
}

@ "TIME FORMAT" FLAG TOGGLE
{
  :: ##1,MAKESINT(FL_TIMEFORMAT) IF FS? THEN "24HRS" ELSE "12HRS" END ;
  ::  ##1,MAKESINT(FL_TIMEFORMAT) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
  "Time format:
24-hours or 12-hours"
}

@ RPN MODE FLAG TOGGLE
{
 :: ##1,MAKESINT(FL_MODERPN) FS? ##1,MAKESINT(FL_EXTENDEDRPN) FS? 2 * +
    CASE
       DUP 0 == THEN DROP "RPL" END
       DUP 1 == THEN DROP "RPN" END
       DUP 2 == THEN DROP "8RPN" END
       DUP 3 == THEN DROP "8RPN" END
    END
 ;

 ::  STKNEW ##1,MAKESINT(FL_EXTENDEDRPN) FS? 3 0 IFTE ##1,MAKESINT(FL_MODERPN) FS? BOR
     1 +
     IF DUP 2 BAND THEN ##1,MAKESINT(FL_EXTENDEDRPN) SF 1 + ELSE ##1,MAKESINT(FL_EXTENDEDRPN) CF END
     IF 1 BAND THEN ##1,MAKESINT(FL_MODERPN) SF ELSE ##1,MAKESINT(FL_MODERPN) CF END
     STKPOP
 ;
 "Current RPN mode:
RPL→RPN→8RPN
"
}



@ "STRIPCOMMENTS" FLAG TOGGLE
{
  :: ##1,MAKESINT(FL_STRIPCOMMENTS) IF FS? THEN "■STRIP" ELSE "STRIP" END ;
  ::  ##1,MAKESINT(FL_STRIPCOMMENTS) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
  "Strip Comments:
Compiler removes comments
when set"
}
@ "ACTIVEMENU1/2" FLAG TOGGLE
{
  :: ##1,MAKESINT(FL_ACTIVEMENU) IF FS? THEN "2MENU" ELSE "1MENU" END ;
  ::  ##1,MAKESINT(FL_ACTIVEMENU) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
  "Changes currently active
menu (1 or 2)"
}



@ "BEEP" FLAG TOGGLE
{
  :: ##1,MAKESINT(FL_ERRORBEEP) IF FS? THEN "BEEP" ELSE "■BEEP" END ;
  :: ##1,MAKESINT(FL_ERRORBEEP) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
  "Error and BEEP command:
sound disabled when set"
}

@ MENU 1 INVERTED MODE FLAG TOGGLE
{
:: ##1,MAKESINT(FL_MENU1WHITE) IF FS? THEN "■M1INV" ELSE "M1INV" END ;
::  ##1,MAKESINT(FL_MENU1WHITE) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
"Menu display:
Menu 1 shows in inverted colors
"
}

@ MENU 2 INVERTED MODE FLAG TOGGLE
{
:: ##1,MAKESINT(FL_MENU2WHITE) IF FS? THEN "■M2INV" ELSE "M2INV" END ;
::  ##1,MAKESINT(FL_MENU2WHITE) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
"Menu display:
Menu 2 shows in inverted colors
"
}

@ UNDERFLOW TRIGGERS AN ERROR
{
:: ##1,MAKESINT(FL_UNDERFLOWERROR) IF FS? THEN "↓→ERR" ELSE "■↓→ERR" END ;
::  ##1,MAKESINT(FL_UNDERFLOWERROR) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
"Arithmetic errors:
Underflow triggers an error
"
}

@ OVERFLOW TRIGGERS AN ERROR
{
:: ##1,MAKESINT(FL_OVERFLOWERROR) IF FS? THEN "↑→ERR" ELSE "■↑→ERR" END ;
::  ##1,MAKESINT(FL_OVERFLOWERROR) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
"Arithmetic errors:
Overflow triggers an error
"
}

@ INFINITE TRIGGERS AN ERROR
{
:: ##1,MAKESINT(FL_INFINITEERROR) IF FS? THEN "∞→ERR" ELSE "■∞→ERR" END ;
::  ##1,MAKESINT(FL_INFINITEERROR) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
"Arithmetic errors:
Infinite result triggers an error
"
}



}


@#name sysmenu_12_keys
{
ASNKEY DELKEY RCLKEYS STOKEYS
@ CUSTOM KEYS FLAG TOGGLE
{
  :: ##1,MAKESINT(FL_NOCUSTOMKEYS) IF FC? THEN "DISABLED" ELSE "■DISABLED" END ;
  :: ##1,MAKESINT(FL_NOCUSTOMKEYS) IF DUP FS? THEN CF ELSE SF END ; @ ACTION: NO SHIFTS
  "Disable custom keys:
Custom keys disabled when set"
}
}


@#name lib68_cmdhelp
{

SETLOCALE
"Set separators to a 4-char
string: <Dec><Thou><Frac><Arg>
S →"

SETNFMT
"Change number format

<R|S|L> →"

GETLOCALE
"Get separators
 → S "

GETNFMT
"Get current number
format
 → L"

SF
"Set flag by number or name

<I or N> →"

CF
"Clear flag by number or name

<I or N> →"

FC?
"Test if flag is clear

<I or N> → I<1 or 0>"

FS?
"Test if flag is set

<I or N> → I<1 or 0>"

FC?C
"Test if flag is clear
then clear it
<I or N> → I<1 or 0>"

FS?C
"Test if flag is set
then clear it
<I or N> → I<1 or 0>"

TMENU
"Change menu to a list,
variable content or code
<I or N or L> → "


TMENULST
"Change menu that was
last used
<I or N or L> → "

TMENUOTHR
"Change menu that was
not last used
<I or N or L> → "


RCLMENU
"Get the active menu

 → <I or N or L>"

RCLMENULST
"Get the menu that was
last used
 → <I or N or L>"

RCLMENUOTHR
"Get the menu that was
not last used
 → <I or N or L>"

MENUSWAP
"Swap soft menus

 → "

MENUBK
"Change active menu to the
previously used menu
 → "

MENUBKLST
"Change last used menu to the
previous menu
 → "

MENUBKOTHR
"Change menu that was not
used last to the previous
 → "

DEG
"Set angle flags to Degrees.

 → "

GRAD
"Set angle flags to Gon (Grads).

 → "

RAD
"Set angle flags to Radians.

 → "

DMS
"Set angle flags to Degrees,
Minutes and Seconds.
 → "

ASNKEY
"Assign custom key. Key name
given as a string.
O S I → "

DELKEY
"Delete custom key assignment.

S → "

RCLKEYS
"Get all keys definition.

→ L "

STOKEYS
"Store all keys definition.

L → "

TYPE
"Get type of an object

O → I"

TYPEE
"Get extended type information
from an object
O → R"


}
