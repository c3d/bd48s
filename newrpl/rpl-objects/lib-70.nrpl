@ Typical RPL symbols to copy/paste:
@ « » →
@ Stack diagram symbols:
@ I = Integer number
@ R = Real number
@ Z = Complex number
@ S = String
@ L = List
@ U = Unit object
@ V = Vector
@ M = Matrix
@ N = Variable name
@ O = Any object
@ P = Program
@ A = Algebraic object (symbolic)


@  @#name lib70_msgtable
@{
@ NO MESSAGES IN THIS LIBRARY!
@}


@#name lib70menu_main
{
{ "#→#" « IFERR DUP TYPEE IF DUP 62 == THEN DROP DUP 1 « TYPE 10 ≠ » DOLIST
            IF ISTRUE THEN 62 ELSE DUP HEAD TYPEE END END
            CASE
                DUP 10.12 == THEN #0b 1 END
                DUP 10 == THEN #0b 1 END
                DUP 10.02 == THEN #0o 1 END
                DUP 10.22 == THEN #0h 1 END
                DUP 10.32 == THEN 0 1 END
                0
            END
            IF THEN ROT + NIP ELSE DROP END
         THEN END
        »
}
{ "→#h" « IF DUP TYPE 62 == THEN
                    1 « IF DUP TYPE 10 == THEN #0h SWAP + END » DOLIST
            ELSE IF DUP TYPE 10 == THEN #0h SWAP + END
            END
        »
}
{ "→#d" « IF DUP TYPE 62 == THEN
            1 « IF DUP TYPE 10 == THEN 0 SWAP + END » DOLIST
            ELSE IF DUP TYPE 10 == THEN 0 SWAP + END
            END
        »
}
{ "→#o" « IF DUP TYPE 62 == THEN
            1 « IF DUP TYPE 10 == THEN #0o SWAP + END » DOLIST
            ELSE IF DUP TYPE 10 == THEN #0o SWAP + END
            END
»
}
{ "→#b" « IF DUP TYPE 62 == THEN
            1 « IF DUP TYPE 10 == THEN #0b SWAP + END » DOLIST
            ELSE IF DUP TYPE 10 == THEN #0b SWAP + END
            END
»
}

STWS RCWS BADD BSUB BMUL
BDIV BNEG BLSL BLSR BASR
BRL BRR BOR BAND BXOR
BNOT
}

@#name lib70_cmdhelp
{

BADD
"Add two N-bit integers

I1 I2 → (I1+I2) "

BSUB
"Subtract two N-bit integers

I1 I2 → (I1-I2) "

BMUL
"Multiply two N-bit integers

I1 I2 → (I1*I2) "

BDIV
"Divide two N-bit integers

I1 I2 → (I1/I2) "

BNEG
"Change sign of N-bit integer
(N-bit integer)
I1 → -I1 "

BLSL
"Shift left (N-bit int)

I1 I2 → (I1 << I2) "


BLSR
"Logical shift right
(unsigned N-bit integer)
I1 I2 → (I1 >> I2) "

BASR
"Arithmetic shift right
(signed N-bit integer)
I1 I2 → (I1 >> I2) "

BRL
"Rotate left
(unsigned N-bit integer)
I1 I2 → (I1 <Rot< I2) "

BRR
"Rotate right
(unsigned N-bit integer)
I1 I2 → (I1 <Rot< I2) "


BOR
"Bitwise OR
(N-bit integer)
I1 I2 → (I1 | I2) "


BAND
"Bitwise AND
(N-bit integer)
I1 I2 → (I1 & I2) "

BXOR
"Bitwise XOR
(N-bit integer)
I1 I2 → (I1 XOR I2) "

BNOT
"Bitwise NOT
(N-bit integer)
I1 → ~I1 "

STWS
"Store current word size
(N-bits + 1 bit sign)
I<N> → "

RCWS
"Get current word size
(N-bits + 1 bit sign)
 → I<N>"

}

@#name lib70_basecycle
« IFERR DUP TYPEE IF DUP 62 == THEN DROP DUP 1 « TYPE 10 ≠ » DOLIST
                                    IF ISTRUE THEN 62 ELSE DUP HEAD TYPEE END END
                     CASE
                     DUP 10.12 == THEN #0b 1 END
                     DUP 10 == THEN #0b 1 END
                     DUP 10.02 == THEN #0o 1 END
                     DUP 10.22 == THEN #0h 1 END
                     DUP 10.32 == THEN 0 1 END
                     0
                     END
                IF THEN ROT + NIP ELSE DROP END
                THEN END
»


